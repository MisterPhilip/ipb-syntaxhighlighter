<?xml version="1.0" encoding="utf-8"?>
<hookexport>
  <hookdata>
    <config>
      <hook_name>SyntaxHighlighter</hook_name>
      <hook_desc>SyntaxHighlighter drop-in replacement for Prettify</hook_desc>
      <hook_author>Philip Lawrence</hook_author>
      <hook_email/>
      <hook_website><![CDATA[http://misterphilip.com/ipb.php?action=view&amp;product=SyntaxHighlighter]]></hook_website>
      <hook_update_check><![CDATA[http://misterphilip.com/ipb.php?action=updates&amp;product=SyntaxHighlighter]]></hook_update_check>
      <hook_requirements><![CDATA[a:3:{s:21:"required_applications";a:1:{s:4:"core";a:3:{s:8:"app_name";s:6:"System";s:11:"min_version";i:34006;s:11:"max_version";i:0;}}s:20:"hook_php_version_min";s:0:"";s:20:"hook_php_version_max";s:0:"";}]]></hook_requirements>
      <hook_version_human>1.0.1</hook_version_human>
      <hook_version_long>10010</hook_version_long>
      <hook_extra_data><![CDATA[a:5:{s:7:"display";a:3:{s:8:"settings";s:32:"Setting groups: Code Highlighter";s:3:"css";s:29:"CSS Files:  SyntaxHighlighter";s:8:"language";s:130:"From core_public_js: codesyntax_alert, codesyntax_brushNotHtmlScript, codesyntax_expandSource, codesyntax_help, codesyntax_noBrush";}s:13:"settingGroups";a:1:{i:0;s:16:"code_highlighter";}s:8:"settings";a:6:{i:0;s:23:"codesyntax_clickableURL";i:1;s:19:"codesyntax_collapse";i:2;s:17:"codesyntax_gutter";i:3;s:19:"codesyntax_parseOld";i:4;s:20:"codesyntax_smartTabs";i:5;s:18:"codesyntax_tabSize";}s:8:"language";a:1:{s:9:"public_js";a:5:{i:0;s:23:"codesyntax_expandSource";i:1;s:15:"codesyntax_help";i:2;s:16:"codesyntax_alert";i:3;s:18:"codesyntax_noBrush";i:4;s:29:"codesyntax_brushNotHtmlScript";}}s:3:"css";a:1:{s:17:"SyntaxHighlighter";s:17:"SyntaxHighlighter";}}]]></hook_extra_data>
      <hook_key>SyntaxHighlighter</hook_key>
      <hook_global_caches/>
    </config>
  </hookdata>
  <hookfiles>
    <file>
      <hook_file_real>SyntaxHighlighter.php</hook_file_real>
      <hook_type>skinHooks</hook_type>
      <hook_classname>SyntaxHighlighter</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:0:"";s:15:"classToOverload";s:11:"skin_global";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
      <hooks_source><![CDATA[class SyntaxHighlighter extends (~extends~)
{
public function include_highlighter( $load_when_needed=0 )
{
$IPBHTML = "";
//--starthtml--//
$IPBHTML .= <<<EOF
	<script type="text/javascript" src="{$this->settings['js_base_url']}js/3rd_party/SyntaxHighlighter/shCore.js"></script>
	<script type="text/javascript" src="{$this->settings['js_base_url']}js/3rd_party/SyntaxHighlighter/shAutoloader.js"></script>
    <script type="text/javascript">
        //<!#^#|CDATA|
        Event.observe( window, 'load', function( e ) {

            SyntaxHighlighter.autoloader(
                    'applescript              {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushAppleScript.js',
                    'actionscript3 as3        {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushAS3.js',
                    'bash shell               {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushBash.js',
                    'coldfusion cf            {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushColdFusion.js',
                    'cpp c                    {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushCpp.js',
                    'c# c-sharp csharp        {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushCSharp.js',
                    'css                      {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushCss.js',
                    'delphi pascal            {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushDelphi.js',
                    'diff patch pas           {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushDiff.js',
                    'erl erlang               {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushErlang.js',
                    'groovy                   {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushGroovy.js',
                    'java                     {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushJava.js',
                    'jfx javafx               {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushJavaFX.js',
                    'js jscript javascript    {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushJScript.js',
                    'perl pl                  {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushPerl.js',
                    'php                      {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushPhp.js',
                    'text plain               {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushPlain.js',
                    'py python                {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushPython.js',
                    'ruby rails ror rb        {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushRuby.js',
                    'sass scss                {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushSass.js',
                    'scala                    {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushScala.js',
                    'sql                      {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushSql.js',
                    'vb vbnet                 {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushVb.js',
                    'xml xhtml xslt html auto {$this->settings['js_base_url']}/js/3rd_party/SyntaxHighlighter/shBrushXml.js'
            );
            SyntaxHighlighter.config.strings.expandSource       = ipb.lang['codesyntax_expandSource'];
            SyntaxHighlighter.config.strings.help               = ipb.lang['codesyntax_help'];
            SyntaxHighlighter.config.strings.alert              = ipb.lang['codesyntax_alert'];
            SyntaxHighlighter.config.strings.noBrush            = ipb.lang['codesyntax_noBrush'];
            SyntaxHighlighter.config.strings.brushNotHtmlScript = ipb.lang['codesyntax_brushNotHtmlScript'];
            SyntaxHighlighter.defaults['auto-links'] = Boolean({$this->settings['codesyntax_clickableURL']});
            SyntaxHighlighter.defaults['smart-tabs'] = Boolean({$this->settings['codesyntax_smartTabs']});
            SyntaxHighlighter.defaults['tab-size']   = parseInt({$this->settings['codesyntax_tabSize']});
            SyntaxHighlighter.defaults['collapse']   = Boolean({$this->settings['codesyntax_collapse']});

            SyntaxHighlighter.all();
        });
        var prettyPrint = function() {
            SyntaxHighlighter.all();
        };
        //|#^#]>
    </script>
EOF;
//--endhtml--//
return $IPBHTML;
	}
    
    function globalTemplate($html, $documentHeadItems, $css, $jsModules, $metaTags, array $header_items, $items=array(), $footer_items=array(), $stats=array())
    {
        // Add in the SyntaxHighlighter CSS core file
        $settings = ipsRegistry::instance()->fetchSettings();
        $newFile = $settings['css_base_url'] . 'style_css/3rd_party/SyntaxHighlighter/shCore.css';
        $css['import'][$newFile] = array( 'content' => $newFile );
        
        return parent::globalTemplate($html, $documentHeadItems, $css, $jsModules, $metaTags, $header_items, $items, $footer_items, $stats);
    }
}]]></hooks_source>
    </file>
  </hookfiles>
  <hookextras_settings>
    <setting>
      <conf_is_title>1</conf_is_title>
      <conf_title_title>Code Highlighter</conf_title_title>
      <conf_title_desc>Options for displaying code via SyntaxHighlighter</conf_title_desc>
      <conf_title_noshow>0</conf_title_noshow>
      <conf_title_keyword>code_highlighter</conf_title_keyword>
      <conf_title_app>core</conf_title_app>
      <conf_title_tab>System</conf_title_tab>
    </setting>
    <setting>
      <conf_id>346</conf_id>
      <conf_title>Enable clickable URLs</conf_title>
      <conf_description><![CDATA[Allows you to turn detection of links in the highlighted element on and off. If the option is turned off, URLs wonâ€™t be clickable. (<a href="http://alexgorbatchev.com/SyntaxHighlighter/manual/demo/auto-links.html">Demo</a>)<br /><br />
<strong>URLs are not filtered against a black/whitelist, nor do they have rel="no-follow". Use with caution</strong>]]></conf_description>
      <conf_group>37</conf_group>
      <conf_type>yes_no</conf_type>
      <conf_key>codesyntax_clickableURL</conf_key>
      <conf_value/>
      <conf_default>0</conf_default>
      <conf_extra/>
      <conf_evalphp/>
      <conf_protected>1</conf_protected>
      <conf_position>3</conf_position>
      <conf_start_group>SyntaxHighlighter Options</conf_start_group>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>code_highlighter</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>347</conf_id>
      <conf_title>Collapse Code</conf_title>
      <conf_description><![CDATA[Should the code box be collapsed (similar to a spoiler tag) on page load? (<a href="http://alexgorbatchev.com/SyntaxHighlighter/manual/demo/collapse.html">Demo</a>)]]></conf_description>
      <conf_group>37</conf_group>
      <conf_type>yes_no</conf_type>
      <conf_key>codesyntax_collapse</conf_key>
      <conf_value/>
      <conf_default>0</conf_default>
      <conf_extra/>
      <conf_evalphp/>
      <conf_protected>1</conf_protected>
      <conf_position>6</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>code_highlighter</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>348</conf_id>
      <conf_title>Hide line numbers if no starting number</conf_title>
      <conf_description><![CDATA[Should we hide the line numbers if the user gave us no starting line number, or gave 0? (<a href="http://alexgorbatchev.com/SyntaxHighlighter/manual/demo/gutter.html">Demo</a>)]]></conf_description>
      <conf_group>37</conf_group>
      <conf_type>yes_no</conf_type>
      <conf_key>codesyntax_gutter</conf_key>
      <conf_value/>
      <conf_default/>
      <conf_extra/>
      <conf_evalphp/>
      <conf_protected>1</conf_protected>
      <conf_position>7</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>code_highlighter</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>352</conf_id>
      <conf_title>Key to highlight a line</conf_title>
      <conf_description><![CDATA[Users have the ability to highlight lines (<a href="">Demo</a>) based on characters they put at the beginning of that line. <br /><br />
For example, if "##" is the value and the following code is put in the editor:<br />
<code><pre>&lt;?php
##$foo = true;
foobar('test');
</pre></code><br />
"$foo = true;" would be highlighted. <br /><br />
If you wish to disable this setting set to an empty string.]]></conf_description>
      <conf_group>37</conf_group>
      <conf_type>input</conf_type>
      <conf_key>codesyntax_highlightKey</conf_key>
      <conf_value/>
      <conf_default>##</conf_default>
      <conf_extra/>
      <conf_evalphp>if( $save == 1 )&#13;
  $value = trim( $value );</conf_evalphp>
      <conf_protected>1</conf_protected>
      <conf_position>2</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>code_highlighter</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>349</conf_id>
      <conf_title>Parse outdated bbcodes?</conf_title>
      <conf_description><![CDATA[Should the old bbcodes (html, php, sql, xml) be parsed too?
<!--NOTICE-->]]></conf_description>
      <conf_group>37</conf_group>
      <conf_type>yes_no</conf_type>
      <conf_key>codesyntax_parseOld</conf_key>
      <conf_value/>
      <conf_default>0</conf_default>
      <conf_extra/>
      <conf_evalphp><![CDATA[if( $show == 1 )
{
    if( $value == 1 )
    {
        $bbcodes = $this->registry->cache()->getCache('bbcode');
        $bbcode = $bbcodes['codesyntax'];
        
        $aliases = explode( ',', trim( $bbcode['bbcode_aliases'] ) );
        $old = array( 'html','php','sql','xml' );
        
        $missing = array_diff( $old, $aliases );
        $isMissing = ( count( $missing ) > 0 );
        
        $stillExist = array();
        foreach( $old as $oldCode )
            if( isset( $bbcodes[ $oldCode ] ) )
                $stillExist[] = $oldCode;
        $doesExist = ( count( $stillExist ) > 0 );
         
        if( $isMissing || $doesExist )
        {
            $string = '<br /><br /><strong><span style="color:red">NOTICE:</span><br />';
            
            if( $doesExist )
                $string.= 'You need to remove the old BBCodes: ' . implode( ', ', $stillExist );
            if( $isMissing && $doesExist )
                $string.= '<br />';
            if( $isMissing ) 
                $string.= 'You need to add these aliases to the codesyntax BBCode: "' . implode( ', ', $missing ) . '"';
            
            $string.= '</strong>';
        
            $r['conf_description'] = str_replace( '<!--NOTICE-->', $string, $r['conf_description'] );
        }
	}
}]]></conf_evalphp>
      <conf_protected>1</conf_protected>
      <conf_position>1</conf_position>
      <conf_start_group>General Options</conf_start_group>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>code_highlighter</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>350</conf_id>
      <conf_title>Smart Tabs</conf_title>
      <conf_description><![CDATA[Enables the smart tabs feature (<a href="http://alexgorbatchev.com/SyntaxHighlighter/manual/demo/smart-tabs.html">Demo</a>)]]></conf_description>
      <conf_group>37</conf_group>
      <conf_type>yes_no</conf_type>
      <conf_key>codesyntax_smartTabs</conf_key>
      <conf_value/>
      <conf_default>0</conf_default>
      <conf_extra/>
      <conf_evalphp/>
      <conf_protected>1</conf_protected>
      <conf_position>5</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>code_highlighter</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
    <setting>
      <conf_id>351</conf_id>
      <conf_title>Tab size</conf_title>
      <conf_description><![CDATA[The size of a tab, in spaces. (<a href="http://alexgorbatchev.com/SyntaxHighlighter/manual/demo/tab-size.html">Demo</a>)]]></conf_description>
      <conf_group>37</conf_group>
      <conf_type>input</conf_type>
      <conf_key>codesyntax_tabSize</conf_key>
      <conf_value/>
      <conf_default>4</conf_default>
      <conf_extra/>
      <conf_evalphp/>
      <conf_protected>1</conf_protected>
      <conf_position>4</conf_position>
      <conf_start_group/>
      <conf_add_cache>1</conf_add_cache>
      <conf_keywords/>
      <conf_title_keyword>code_highlighter</conf_title_keyword>
      <conf_is_title>0</conf_is_title>
    </setting>
  </hookextras_settings>
  <hookextras_language/>
  <hookextras_modules/>
  <hookextras_help/>
  <hookextras_templates/>
  <hookextras_css>
    <css>
      <css_updated>1357539304</css_updated>
      <css_group>SyntaxHighlighter</css_group>
      <css_content><![CDATA[
.syntaxhighlighter a,
.syntaxhighlighter div,
.syntaxhighlighter code,
.syntaxhighlighter table,
.syntaxhighlighter table td,
.syntaxhighlighter table tr,
.syntaxhighlighter table tbody,
.syntaxhighlighter table thead,
.syntaxhighlighter table caption,
.syntaxhighlighter textarea {
  -moz-border-radius: 0 0 0 0 !important;
  -webkit-border-radius: 0 0 0 0 !important;
  background: none !important;
  border: 0 !important;
  bottom: auto !important;
  float: none !important;
  height: auto !important;
  left: auto !important;
  line-height: 1.1em !important;
  margin: 0 !important;
  outline: 0 !important;
  overflow: visible !important;
  padding: 0 !important;
  position: static !important;
  right: auto !important;
  text-align: left !important;
  top: auto !important;
  vertical-align: baseline !important;
  width: auto !important;
  box-sizing: content-box !important;
  font-family: "Consolas", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace !important;
  font-weight: normal !important;
  font-style: normal !important;
  font-size: 1em !important;
  min-height: inherit !important;
  min-height: auto !important;
}

.syntaxhighlighter {
  width: 100% !important;
  margin: 1em 0 1em 0 !important;
  position: relative !important;
  overflow: auto !important;
  font-size: 1em !important;
}
.syntaxhighlighter.source {
  overflow: hidden !important;
}
.syntaxhighlighter .bold {
  font-weight: bold !important;
}
.syntaxhighlighter .italic {
  font-style: italic !important;
}
.syntaxhighlighter .line {
  white-space: pre !important;
}
.syntaxhighlighter table {
  width: 100% !important;
}
.syntaxhighlighter table caption {
  text-align: left !important;
  padding: .5em 0 0.5em 1em !important;
}
.syntaxhighlighter table td.code {
  width: 100% !important;
}
.syntaxhighlighter table td.code .container {
  position: relative !important;
}
.syntaxhighlighter table td.code .container textarea {
  box-sizing: border-box !important;
  position: absolute !important;
  left: 0 !important;
  top: 0 !important;
  width: 100% !important;
  height: 100% !important;
  border: none !important;
  background: white !important;
  padding-left: 1em !important;
  overflow: hidden !important;
  white-space: pre !important;
}
.syntaxhighlighter table td.gutter .line {
  text-align: right !important;
  padding: 0 0.5em 0 1em !important;
}
.syntaxhighlighter table td.code .line {
  padding: 0 1em !important;
}
.syntaxhighlighter.nogutter td.code .container textarea, .syntaxhighlighter.nogutter td.code .line {
  padding-left: 0em !important;
}
.syntaxhighlighter.show {
  display: block !important;
}
.syntaxhighlighter.collapsed table {
  display: none !important;
}
.syntaxhighlighter.collapsed .toolbar {
  padding: 0.1em 0.8em 0em 0.8em !important;
  font-size: 1em !important;
  position: static !important;
  width: auto !important;
  height: auto !important;
}
.syntaxhighlighter.collapsed .toolbar span {
  display: inline !important;
  margin-right: 1em !important;
}
.syntaxhighlighter.collapsed .toolbar span a {
  padding: 0 !important;
  display: none !important;
}
.syntaxhighlighter.collapsed .toolbar span a.expandSource {
  display: inline !important;
}
.syntaxhighlighter .toolbar {
  position: absolute !important;
  right: 1px !important;
  top: 1px !important;
  width: 11px !important;
  height: 11px !important;
  font-size: 10px !important;
  z-index: 10 !important;
}
.syntaxhighlighter .toolbar span.title {
  display: inline !important;
}
.syntaxhighlighter .toolbar a {
  display: block !important;
  text-align: center !important;
  text-decoration: none !important;
  padding-top: 1px !important;
}
.syntaxhighlighter .toolbar a.expandSource {
  display: none !important;
}
.syntaxhighlighter.ie {
  font-size: .9em !important;
  padding: 1px 0 1px 0 !important;
}
.syntaxhighlighter.ie .toolbar {
  line-height: 8px !important;
}
.syntaxhighlighter.ie .toolbar a {
  padding-top: 0px !important;
}
.syntaxhighlighter.printing .line.alt1 .content,
.syntaxhighlighter.printing .line.alt2 .content,
.syntaxhighlighter.printing .line.highlighted .number,
.syntaxhighlighter.printing .line.highlighted.alt1 .content,
.syntaxhighlighter.printing .line.highlighted.alt2 .content {
  background: none !important;
}
.syntaxhighlighter.printing .line .number {
  color: #bbbbbb !important;
}
.syntaxhighlighter.printing .line .content {
  color: black !important;
}
.syntaxhighlighter.printing .toolbar {
  display: none !important;
}
.syntaxhighlighter.printing a {
  text-decoration: none !important;
}
.syntaxhighlighter.printing .plain, .syntaxhighlighter.printing .plain a {
  color: black !important;
}
.syntaxhighlighter.printing .comments, .syntaxhighlighter.printing .comments a {
  color: #008200 !important;
}
.syntaxhighlighter.printing .string, .syntaxhighlighter.printing .string a {
  color: blue !important;
}
.syntaxhighlighter.printing .keyword {
  color: #006699 !important;
  font-weight: bold !important;
}
.syntaxhighlighter.printing .preprocessor {
  color: gray !important;
}
.syntaxhighlighter.printing .variable {
  color: #aa7700 !important;
}
.syntaxhighlighter.printing .value {
  color: #009900 !important;
}
.syntaxhighlighter.printing .functions {
  color: #ff1493 !important;
}
.syntaxhighlighter.printing .constants {
  color: #0066cc !important;
}
.syntaxhighlighter.printing .script {
  font-weight: bold !important;
}
.syntaxhighlighter.printing .color1, .syntaxhighlighter.printing .color1 a {
  color: gray !important;
}
.syntaxhighlighter.printing .color2, .syntaxhighlighter.printing .color2 a {
  color: #ff1493 !important;
}
.syntaxhighlighter.printing .color3, .syntaxhighlighter.printing .color3 a {
  color: red !important;
}
.syntaxhighlighter.printing .break, .syntaxhighlighter.printing .break a {
  color: black !important;
}

.syntaxhighlighter {
  background-color: white !important;
}
.syntaxhighlighter .line.alt1 {
  background-color: white !important;
}
.syntaxhighlighter .line.alt2 {
  background-color: white !important;
}
.syntaxhighlighter .line.highlighted.alt1, .syntaxhighlighter .line.highlighted.alt2 {
  background-color: #e0e0e0 !important;
}
.syntaxhighlighter .line.highlighted.number {
  color: black !important;
}
.syntaxhighlighter table caption {
  color: black !important;
}
.syntaxhighlighter .gutter {
  color: #afafaf !important;
}
.syntaxhighlighter .gutter .line {
  border-right: 3px solid #6ce26c !important;
}
.syntaxhighlighter .gutter .line.highlighted {
  background-color: #6ce26c !important;
  color: white !important;
}
.syntaxhighlighter.printing .line .content {
  border: none !important;
}
.syntaxhighlighter.collapsed {
  overflow: visible !important;
}
.syntaxhighlighter.collapsed .toolbar {
  color: blue !important;
  background: white !important;
  border: 1px solid #6ce26c !important;
}
.syntaxhighlighter.collapsed .toolbar a {
  color: blue !important;
}
.syntaxhighlighter.collapsed .toolbar a:hover {
  color: red !important;
}
.syntaxhighlighter .toolbar {
  color: white !important;
  background: #6ce26c !important;
  border: none !important;
}
.syntaxhighlighter .toolbar a {
  color: white !important;
}
.syntaxhighlighter .toolbar a:hover {
  color: black !important;
}
.syntaxhighlighter .plain, .syntaxhighlighter .plain a {
  color: black !important;
}
.syntaxhighlighter .comments, .syntaxhighlighter .comments a {
  color: #008200 !important;
}
.syntaxhighlighter .string, .syntaxhighlighter .string a {
  color: blue !important;
}
.syntaxhighlighter .keyword {
  color: #006699 !important;
}
.syntaxhighlighter .preprocessor {
  color: gray !important;
}
.syntaxhighlighter .variable {
  color: #aa7700 !important;
}
.syntaxhighlighter .value {
  color: #009900 !important;
}
.syntaxhighlighter .functions {
  color: #ff1493 !important;
}
.syntaxhighlighter .constants {
  color: #0066cc !important;
}
.syntaxhighlighter .script {
  font-weight: bold !important;
  color: #006699 !important;
  background-color: none !important;
}
.syntaxhighlighter .color1, .syntaxhighlighter .color1 a {
  color: gray !important;
}
.syntaxhighlighter .color2, .syntaxhighlighter .color2 a {
  color: #ff1493 !important;
}
.syntaxhighlighter .color3, .syntaxhighlighter .color3 a {
  color: red !important;
}

.syntaxhighlighter .keyword {
  font-weight: bold !important;
}]]></css_content>
      <css_position>0</css_position>
      <css_added_to>0</css_added_to>
      <css_app/>
      <css_app_hide>0</css_app_hide>
      <css_attributes/>
      <css_modules/>
      <css_removed>0</css_removed>
      <css_master_key>root</css_master_key>
    </css>
  </hookextras_css>
  <hookextras_replacements/>
  <hookextras_tasks/>
  <hookextras_database_create/>
  <hookextras_database_alter/>
  <hookextras_database_update/>
  <hookextras_database_insert/>
</hookexport>