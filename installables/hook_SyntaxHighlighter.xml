<?xml version="1.0" encoding="utf-8"?>
<hookexport>
  <hookdata>
    <config>
      <hook_name>SyntaxHighlighter: Skin Replacements</hook_name>
      <hook_desc>SyntaxHighlighter drop-in replacement for Prettify</hook_desc>
      <hook_author>Philip Lawrence</hook_author>
      <hook_email/>
      <hook_website>http://misterphilip.com</hook_website>
      <hook_update_check/>
      <hook_requirements><![CDATA[a:3:{s:21:"required_applications";a:0:{}s:20:"hook_php_version_min";s:0:"";s:20:"hook_php_version_max";s:0:"";}]]></hook_requirements>
      <hook_version_human>1.0.0</hook_version_human>
      <hook_version_long>10000</hook_version_long>
      <hook_extra_data/>
      <hook_key>SyntaxHighlighter_Replacements</hook_key>
      <hook_global_caches/>
    </config>
  </hookdata>
  <hookfiles>
    <file>
      <hook_file_real>SyntaxHighlighter_Replacements.php</hook_file_real>
      <hook_type>skinHooks</hook_type>
      <hook_classname>SyntaxHighlighter_Replacements</hook_classname>
      <hook_data><![CDATA[a:8:{s:12:"dataLocation";s:0:"";s:14:"libApplication";s:0:"";s:15:"classToOverload";s:11:"skin_global";s:9:"skinGroup";N;s:12:"skinFunction";N;s:4:"type";N;s:2:"id";N;s:8:"position";N;}]]></hook_data>
      <hooks_source><![CDATA[class SyntaxHighlighter_Replacements extends (~extends~)
{
	public function include_highlighter( $load_when_needed=0 )
	{
$brushLoc = $this->settings['js_base_url'] . '/js/3rd_party/SyntaxHighlighter/';
$IPBHTML = "";
//--starthtml--//
$IPBHTML .= <<<EOF
	<script type="text/javascript" src="{$this->settings['js_base_url']}js/3rd_party/SyntaxHighlighter/shCore.js"></script>
	<script type="text/javascript" src="{$this->settings['js_base_url']}js/3rd_party/SyntaxHighlighter/shAutoloader.js"></script>
    <script type="text/javascript">
//<!#^#|CDATA|
Event.observe( window, 'load', function( e ) {    
    
    SyntaxHighlighter.autoloader(
      'applescript              {$brushLoc}shBrushAppleScript.js',
      'actionscript3 as3        {$brushLoc}shBrushAS3.js',
      'bash shell               {$brushLoc}shBrushBash.js',
      'coldfusion cf            {$brushLoc}shBrushColdFusion.js',
      'cpp c                    {$brushLoc}shBrushCpp.js',
      'c# c-sharp csharp        {$brushLoc}shBrushCSharp.js',
      'css                      {$brushLoc}shBrushCss.js',
      'delphi pascal            {$brushLoc}shBrushDelphi.js',
      'diff patch pas           {$brushLoc}shBrushDiff.js',
      'erl erlang               {$brushLoc}shBrushErlang.js',
      'groovy                   {$brushLoc}shBrushGroovy.js',
      'java                     {$brushLoc}shBrushJava.js',
      'jfx javafx               {$brushLoc}shBrushJavaFX.js',
      'js jscript javascript    {$brushLoc}shBrushJScript.js',
      'perl pl                  {$brushLoc}shBrushPerl.js',
      'php                      {$brushLoc}shBrushPhp.js',
      'text plain               {$brushLoc}shBrushPlain.js',
      'py python                {$brushLoc}shBrushPython.js',
      'ruby rails ror rb        {$brushLoc}shBrushRuby.js',
      'sass scss                {$brushLoc}shBrushSass.js',
      'scala                    {$brushLoc}shBrushScala.js',
      'sql                      {$brushLoc}shBrushSql.js',
      'vb vbnet                 {$brushLoc}shBrushVb.js',
      'xml xhtml xslt html auto {$brushLoc}shBrushXml.js'
    );
    
    SyntaxHighlighter.all();
});
var prettyPrint = function() { 
    SyntaxHighlighter.all(); 
};
	//|#^#]>
	</script>
EOF;
//--endhtml--//
return $IPBHTML;
	}
    
    function globalTemplate($html, $documentHeadItems, $css, $jsModules, $metaTags, array $header_items, $items=array(), $footer_items=array(), $stats=array())
    {
        // Add in the SyntaxHighlighter CSS file
        $settings = ipsRegistry::instance()->fetchSettings();
        $newFile = $settings['css_base_url'] . 'style_css/3rd_party/SyntaxHighlighter/shCore.css';
        $css['import'][$newFile] = array( 'content' => $newFile );
        $newFile = $settings['css_base_url'] . 'style_css/3rd_party/SyntaxHighlighter/shTheme.css';
        $css['import'][$newFile] = array( 'content' => $newFile );
        
        return parent::globalTemplate($html, $documentHeadItems, $css, $jsModules, $metaTags, $header_items, $items, $footer_items, $stats);
    }
}]]></hooks_source>
    </file>
  </hookfiles>
  <hookextras_settings/>
  <hookextras_language/>
  <hookextras_modules/>
  <hookextras_help/>
  <hookextras_templates/>
  <hookextras_css/>
  <hookextras_replacements/>
  <hookextras_tasks/>
  <hookextras_database_create/>
  <hookextras_database_alter/>
  <hookextras_database_update/>
  <hookextras_database_insert/>
</hookexport>